// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package rpc

import (
	context "context"
	common "github.com/talos-systems/theila/api/common"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// ClusterResourceServiceClient is the client API for ClusterResourceService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ClusterResourceServiceClient interface {
	Get(ctx context.Context, in *GetFromClusterRequest, opts ...grpc.CallOption) (*GetFromClusterResponse, error)
	List(ctx context.Context, in *ListFromClusterRequest, opts ...grpc.CallOption) (*ListFromClusterResponse, error)
	GetConfig(ctx context.Context, in *common.Cluster, opts ...grpc.CallOption) (*ConfigResponse, error)
}

type clusterResourceServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewClusterResourceServiceClient(cc grpc.ClientConnInterface) ClusterResourceServiceClient {
	return &clusterResourceServiceClient{cc}
}

func (c *clusterResourceServiceClient) Get(ctx context.Context, in *GetFromClusterRequest, opts ...grpc.CallOption) (*GetFromClusterResponse, error) {
	out := new(GetFromClusterResponse)
	err := c.cc.Invoke(ctx, "/resource.ClusterResourceService/Get", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *clusterResourceServiceClient) List(ctx context.Context, in *ListFromClusterRequest, opts ...grpc.CallOption) (*ListFromClusterResponse, error) {
	out := new(ListFromClusterResponse)
	err := c.cc.Invoke(ctx, "/resource.ClusterResourceService/List", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *clusterResourceServiceClient) GetConfig(ctx context.Context, in *common.Cluster, opts ...grpc.CallOption) (*ConfigResponse, error) {
	out := new(ConfigResponse)
	err := c.cc.Invoke(ctx, "/resource.ClusterResourceService/GetConfig", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ClusterResourceServiceServer is the server API for ClusterResourceService service.
// All implementations must embed UnimplementedClusterResourceServiceServer
// for forward compatibility
type ClusterResourceServiceServer interface {
	Get(context.Context, *GetFromClusterRequest) (*GetFromClusterResponse, error)
	List(context.Context, *ListFromClusterRequest) (*ListFromClusterResponse, error)
	GetConfig(context.Context, *common.Cluster) (*ConfigResponse, error)
	mustEmbedUnimplementedClusterResourceServiceServer()
}

// UnimplementedClusterResourceServiceServer must be embedded to have forward compatible implementations.
type UnimplementedClusterResourceServiceServer struct {
}

func (UnimplementedClusterResourceServiceServer) Get(context.Context, *GetFromClusterRequest) (*GetFromClusterResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Get not implemented")
}
func (UnimplementedClusterResourceServiceServer) List(context.Context, *ListFromClusterRequest) (*ListFromClusterResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method List not implemented")
}
func (UnimplementedClusterResourceServiceServer) GetConfig(context.Context, *common.Cluster) (*ConfigResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetConfig not implemented")
}
func (UnimplementedClusterResourceServiceServer) mustEmbedUnimplementedClusterResourceServiceServer() {
}

// UnsafeClusterResourceServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ClusterResourceServiceServer will
// result in compilation errors.
type UnsafeClusterResourceServiceServer interface {
	mustEmbedUnimplementedClusterResourceServiceServer()
}

func RegisterClusterResourceServiceServer(s grpc.ServiceRegistrar, srv ClusterResourceServiceServer) {
	s.RegisterService(&ClusterResourceService_ServiceDesc, srv)
}

func _ClusterResourceService_Get_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetFromClusterRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ClusterResourceServiceServer).Get(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/resource.ClusterResourceService/Get",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ClusterResourceServiceServer).Get(ctx, req.(*GetFromClusterRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ClusterResourceService_List_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListFromClusterRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ClusterResourceServiceServer).List(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/resource.ClusterResourceService/List",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ClusterResourceServiceServer).List(ctx, req.(*ListFromClusterRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ClusterResourceService_GetConfig_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(common.Cluster)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ClusterResourceServiceServer).GetConfig(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/resource.ClusterResourceService/GetConfig",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ClusterResourceServiceServer).GetConfig(ctx, req.(*common.Cluster))
	}
	return interceptor(ctx, in, info, handler)
}

// ClusterResourceService_ServiceDesc is the grpc.ServiceDesc for ClusterResourceService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var ClusterResourceService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "resource.ClusterResourceService",
	HandlerType: (*ClusterResourceServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Get",
			Handler:    _ClusterResourceService_Get_Handler,
		},
		{
			MethodName: "List",
			Handler:    _ClusterResourceService_List_Handler,
		},
		{
			MethodName: "GetConfig",
			Handler:    _ClusterResourceService_GetConfig_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "rpc/resource.proto",
}
